/*======================================================================================
                           PROGRAM INFORMATION - AVANCE 							      
========================================================================================
Study number     : _NA_
Sponsor          : _NA_
Program name     : avInterimDataToFinalStandard.sas
Output           : _NA_
Created on       : 
By               : SP.Standards
Modified         : 
Note             : Utility macro used to facilitate the creation of the final dataset for reporting
=======================================================================================
Modification History
=======================================================================================
Purpose/Changes  : Optimized conditional statement (Putting 'else' when suitable).
				   Added exception handling.
				   All changes labelled in comment: 'EW 20240820'.
Date changed     : 2024-08-20
By				 : Edgar Wong 

Purpose/Changes  : Added exception for warning if variables are not present in dataset for XXSEQ.
				   These sequence variables are generated by this macro
				   All changes labelled in comment: 'IE 20241009'.
Date changed     : 2024-10-09
By				 : Isak Ellis
=======================================================================================*/

%macro avInterimDataToFinalStandard(dataIn=, dataOut=, standard=) / minoperator;

	options noxwait;
	%if %sysevalf(%superq(dataIn)=,   boolean) or 
		%sysevalf(%superq(dataOut)=,  boolean) or  
		%sysevalf(%superq(standard)=, boolean)  %then %do;
		%put ERROR:1/[AVANCE %sysfunc(datetime(), e8601dt.)] parameters dataIn, dataOut and standard are required;
		%put ERROR:2/[AVANCE %sysfunc(datetime(), e8601dt.)] Macro &sysmacroname aborted;
		%return;
	%end;
	%if %sysfunc(libref(AVGML)) %then %do;
		%put ERROR:1/[AVANCE %sysfunc(datetime(), e8601dt.)] Library AVGML is not assigned. Assign Library AVGML is study setup file;
		%put ERROR:2/[AVANCE %sysfunc(datetime(), e8601dt.)] Macro &sysmacroname aborted;
		%return;
	%end;
	%if ^%sysfunc(exist(%bquote(&dataIn))) %then %do;
		%put ERROR:1/[AVANCE %sysfunc(datetime(), e8601dt.)] data %bquote(&dataIn) does not exist;
		%put ERROR:2/[AVANCE %sysfunc(datetime(), e8601dt.)] Macro &sysmacroname aborted;
		%return;
	%end;
	%if ^%sysfunc(prxmatch(%str(m/^([A-Za-z_]([A-Za-z_0-9]{1,7})?\.)?[A-Za-z_]([A-Za-z_0-9]{1,31})?$/oi), %bquote(&dataOut))) %then %do;
	 	%put ERROR:1/[AVANCE %sysfunc(datetime(), e8601dt.)] &dataOut is not a valid SAS dataset name;
		%put ERROR:2/[AVANCE %sysfunc(datetime(), e8601dt.)] Macro &sysmacroname aborted;
		%return;
	%end;
	%if ^%symglobl(mspath) %then %do;
		%put ERROR:1/[AVANCE %sysfunc(datetime(), e8601dt.)] MSPATH macro variables is not defined in global scope;
		%put ERROR:2/[AVANCE %sysfunc(datetime(), e8601dt.)] Consider Defining MSPATH in your project setup file.;
		%put ERROR:3/[AVANCE %sysfunc(datetime(), e8601dt.)] Macro &sysmacroname aborted;
		%return;
	%end;
	%if ^%eval(%qlowcase(%bquote(&standard)) in sdtm adam) %then %do;
		%put ERROR:1/[AVANCE %sysfunc(datetime(), e8601dt.)] Standard %bquote(&standard) is invalid. Vaild standard are: SDTM, ADAM;
		%put ERROR:2/[AVANCE %sysfunc(datetime(), e8601dt.)] Macro &sysmacroname aborted;
		%return;
	%end;
	%local maindsn suppdsn libdsn;
	%let maindsn=;  
	%let suppdsn=; 
	%let libdsn = WORK;

	/*Separating Main and Library*/
	data _null_;
		length lib dsn $200;
		out=upcase("&dataOut");
		cnt=countw(out, ".");

		if cnt=2 then do;
			lib=scan(out, 1, ".");
			dsn=scan(out, 2, ".");
		end;
		else if cnt=1 then do; /* EW 20240820 */
			lib='WORK';
			dsn=scan(out, 1, ".");
		end;
		else do; /* EW 20240820 */
			/* Used for warning messages */
			datetime=datetime();
			put "WARNING:1/[AVANCE " datetime e8601dt. "] dataOut contains more than 1 fullstop('.').";
			put "WARNING:2/[AVANCE " datetime e8601dt. "] That should have been flagged in initial exception handling.";
		end;

		domain=scan(dsn, 1, "_");
		call symputx("libdsn", lib);
		%if %upcase(&standard)=ADAM %then %do;
			call symputx("maindsn", cats(lib, ".", dsn));
			call symputx("domain", upcase(domain));
		%end;
		%else %if %upcase(&standard)=SDTM %then %do;
			call symputx("maindsn", cats(lib, ".", dsn));
			call symputx("suppdsn", cats(lib, ".SUPP", dsn));
			call symputx("domain", upcase(domain));
		%end;
		%else %do; /* EW 20240820 */
			%put WARNING:1/[AVANCE %sysfunc(datetime(), e8601dt.)] Standard %bquote(&standard) is invalid. Vaild standard are: SDTM, ADAM;
			%put WARNING:2/[AVANCE %sysfunc(datetime(), e8601dt.)] That should have been flagged in initial exception handling.;
		%end;
	run;

	%put NOTE:1/[AVANCE %sysfunc(datetime(), e8601dt.)] Main Dataset :&maindsn;
	%put NOTE:2/[AVANCE %sysfunc(datetime(), e8601dt.)] Supp Dataset: &suppdsn;
	%put NOTE:3/[AVANCE %sysfunc(datetime(), e8601dt.)] Dataset library: &libdsn;
	%put NOTE:4/[AVANCE %sysfunc(datetime(), e8601dt.)] Standard: &standard;
	%put NOTE:5/[AVANCE %sysfunc(datetime(), e8601dt.)] Domain Name: &domain;

	%if &libdsn ^= WORK %then %do;
		/*Achiving Program and Dataset*/
		data _null_;
			length date1 $200;
			date=today();
			time=strip(put(time(), tod8.));
			date1= catt(strip(put(date, YYMMDDN.)),"_h", scan(time, 1, ":"),"m", scan(time, 2, ":"),"s", scan(time, 3, ":"));
			call symputx("bkdtc", date1);
		run;

		/* - Get program location by saving it and retrieving the location of last saved sas program in sashelp.vextfl */
		dm 'flsvlast'; 
		data _vextfl;
			set sashelp.vextfl;
			where scan(upcase(xpath),-1, ".")="SAS";
		run;

		proc sort data=_vextfl; by modate ; run;

		data _null_;
			set _vextfl end=last;
			dm=scan(strip(upcase(scan(scan(xpath,-1, "\"), 1, "."))),1,"_");
			if last then call symputx("progloc", xpath);
			if last then call symputx("dsn_ck1", dm);
		run;

		proc delete data=_vextfl; run;
 
		%if &dsn_ck1 =&domain %then %do;
			/*Program-Archive*/
			data _null_;
				path="&progloc";
				pos=findc(path, "\", -200);
				archive=substr(path, 1, pos-1)||"\Superseded"||scan(substr(path, pos), 1, ".")||" "||"&bkdtc"||"."||scan(substr(path, pos), 2, ".");	
				call symputx("prog_aloc",archive);
			run;

			%sysexec copy "&progloc" "&prog_aloc";

			/*Dataset-Archive*/
			%if %sysfunc(exist(&maindsn))%then %do;
				data _null_;
					length dsn  adsn $200;
					out=upcase("&&dataOut");
					cnt=countw(out, ".");
					if cnt=2 then do;
						dsn=strip(scan(out, 2, "."))||".sas7bdat";
						adsn="\Superseded\"||lowcase(scan(out, 2, ".")||"_&bkdtc"||".sas7bdat");
						call symputx ("dsn", dsn);
						call symputx ("adsn", adsn);
					end;
					else do; /* EW 20240820 */
						/* Used for warning messages */
						datetime=datetime();
						put "WARNING:1/[AVANCE " datetime e8601dt. "] dataOut contains no or more than 1 fullstops('.'). [Code: DSA1].";
						put "WARNING:2/[AVANCE " datetime e8601dt. "] That should have been flagged in initial exception handling.";
					end;
				run;
				data _null_;
					set sashelp.vslib;
					where upcase(libname)=%upcase("&libdsn");
					dsn=strip(path)||"\"||strip("&dsn");
					adsn=strip(path)||"\"||strip("&adsn");
					call symputx ("dsnloc", dsn);
					call symputx ("dsn_aloc", adsn);
				run;
				%sysexec copy "&dsnloc" "&dsn_aloc";
			%end;

			/*Supp-Dataset-Archive*/
			%if %sysfunc(exist(&suppdsn))%then %do;
				data _null_;
					length dsn  adsn $200;
					out=upcase("&&dataOut");
					cnt=countw(out, ".");
					if cnt=2 then do;
						dsn="supp"||strip(scan(out, 2, "."))||".sas7bdat";
						adsn="\Superseded\supp"||lowcase(scan(out, 2, ".")||"_&bkdtc"||".sas7bdat");
						call symputx ("sdsn", dsn);
						call symputx ("sadsn", adsn);
					end;
					else do; /* EW 20240820 */
						/* Used for warning messages */
						datetime=datetime();
						put "WARNING:1/[AVANCE " datetime e8601dt. "] dataOut contains no or more than 1 fullstops('.'). [Code: SDSA1].";
						put "WARNING:2/[AVANCE " datetime e8601dt. "] That should have been flagged in initial exception handling.";
					end;
				run;

				data _null_;
					set sashelp.vslib;
					where upcase(libname)=%upcase("&libdsn");
					dsn=strip(path)||"\"||strip("&sdsn");
					adsn=strip(path)||"\"||strip("&sadsn");
					call symputx ("sdsnloc", dsn);
					call symputx ("sdsn_aloc", adsn);
				run;

				%sysexec copy "&sdsnloc" "&sdsn_aloc";
			%end;
		%end;
		%else %do; /* EW 20240820 */
			%put NOTE:1/[AVANCE %sysfunc(datetime(), e8601dt.)] Back-up not taken;
		%end;
	%end;

	/* EW 20240820 Removed - Finding Library name for Spec temp*/
	/* As if avSetup is run, &speclib is assigned to the library name already */
	/* Else if avSetup is not run, the spec libname statement is likely not run at all, thus rendering this section useless as well. */
	

	/* Check if spec '<domain>' tab exists */
	%let get_error= ;
	proc sql noprint;
		select memname into: get_error from sashelp.vtable
			where libname=%upcase("&speclib") and upcase(memname)=%upcase("&domain");
	quit;

	%if &get_error = %then %do;
		%put WARNING:1/[AVANCE %sysfunc(datetime(), e8601dt.)] Not found- %upcase(&domain.) Spec dataset in the %upcase(&speclib) library;
		%goto exit;
	%end;

	/*Get a list of included variables from spec*/
	data _null_ ;
		length new newvar $2000;
		set sashelp.vcolumn end=last;
		retain new;
		where upcase(libname)=%upcase("&speclib.") and memname=%upcase("&domain.");
		newvar=cats(name,"= var", varnum);
		new=catx(" ", newvar, new);
		if last then call symputx('renspec', strip(new));
	run;

	data avgml.spec_&domain;
		set &speclib..&domain(rename=(&renspec.));
		where upcase(var12)="Y";
		odr=_n_;
		var3=strip(upcase(var3));
		keep var1 var2 var3 var4 var12 odr;
	run;

	/* Get a list of variables from &dataIn */
	data avgml.attrib_&domain;
		set sashelp.vcolumn;
		where upcase(libname)="WORK" and upcase(memname)=%upcase("&dataIn"); /* EW 20240820 */
		/*EW 20240820: removed spec_type */
		var1=strip(upcase(name));
		keep var1;
	run;

	/* Check if spec '<domain>_dataset' tab exists */
	%let get_error= ;
	proc sql noprint;
		select memname into: get_error from sashelp.vtable
			where libname=%upcase("&speclib") and upcase(memname)=%upcase("&domain._dataset");
	quit;

	%if &get_error = %then %do;
		%put WARNING:1/[AVANCE %sysfunc(datetime(), e8601dt.)] %upcase(&domain._dataset) dataset does not exist in the %upcase(&speclib) library;
		%goto exit;
	%end;

	/* Get sort variables, sort order and dataset label from spec <domain>_dataset */
	%let m_label=;

	data avgml.sort_1&domain(keep=var1 sort_order);
		length var1 sortodr $200;
		set &speclib..&domain._dataset end=last;
		where upcase(dsname)=%upcase("&domain");
		sortodr=tranwrd(compress(keys), ",", " ");
		cnt=countw(sortodr);
		do i=1 to cnt;
			var1=scan(sortodr, i);
			sort_order=i;
			output;
		end;
		if last then call symputx("m_label",strip(dslabel));
	run;

	/* Merge spec-included vars, spec-key vars and dataIn vars to get 'clean' sort vars and 'clean' vars */
	proc sort data=avgml.spec_&domain; by var1; run;
	proc sort data=avgml.sort_1&domain; by var1; run;
	proc sort data=avgml.attrib_&domain; by var1; run;

	data avgml.sort_2&domain avgml.fmt_&domain;
		merge avgml.sort_1&domain(in=x) avgml.spec_&domain(in=y) avgml.attrib_&domain(in=z);
		by var1;
		if x and y and z then output avgml.sort_2&domain; /* get intersection of the variables included in spec keys and dataIn */
		if y and z then output avgml.fmt_&domain; /* get intersection of the variables included in spec and dataIn */
		
		/* EW 20240820 */
		/* Used for warning messages */
		datetime=datetime();
		drop datetime;

		if x and ^y then do;
			put "WARNING:1/[AVANCE " datetime e8601dt. "] Key variables in spec do not exist/flagged as 'included' in the main spec -" var1;
		end;
		if x and ^z then do;
			put "WARNING:1/[AVANCE " datetime e8601dt. "] Key variables in spec do not exist in the dataset (&dataIn) -" var1;
		end;
		/* IE 20241009*/
		/* Added and index(upcase(var1), "SEQ") = 0 to exclude warnings for seq numbers. These are auto populate by this macro */
		if y and ^z and index(upcase(var1), "SEQ") = 0 then do;
			put "WARNING:1/[AVANCE " datetime e8601dt. "] Variables marked as 'included' in spec do not exist in the dataset (&dataIn) -" var1;
		end;
	run;
	
	/* Main Sort order and Sequence */
	%let msrtord=;
	proc sort data=avgml.sort_2&domain; by sort_order; run;

	proc sql noprint;
		select var1 into: msrtord separated by ' ' from avgml.sort_2&domain;
	quit;

	%put NOTE:1/[AVANCE %sysfunc(datetime(), e8601dt.)] Sorting order(&domain):  &msrtord;

	/* Set drop_seq if *SEQ exists in &dataIn. Set spec_seq if *SEQ exists in spec */
	%let drop_seq=;
	%let spec_seq=;

	proc sql noprint;
		%if %upcase(&standard)=SDTM %then %do;
			select var1 into: drop_seq from avgml.attrib_&domain where upcase(var1)=%upcase("&domain.SEQ");
			select var1 into: spec_seq from avgml.spec_&domain where upcase(var1)=%upcase("&domain.SEQ");
		%end;
		%else %if %upcase(&standard)=ADAM %then %do;
			select var1 into: drop_seq from avgml.attrib_&domain where upcase(var1)=%upcase("ASEQ");
			select var1 into: spec_seq from avgml.spec_&domain where upcase(var1)=%upcase("ASEQ");
		%end;
	quit;

	/* Set format string for num variables in ADaM */
	%let adamfmt= ;
	%if %upcase(&standard)=ADAM %then %do;
		proc sql noprint;
			select strip(var1)||" "|| strip(var4) into: adamfmt separated by ' '  from avgml.fmt_&domain
				where not missing(var4) and upcase(var3)="NUM";
		quit;
	%end;

	/* If *SEQ exists in spec and not in dataIn */
	%if &spec_seq^= and &drop_seq = %then %do;
		proc sort data=&dataIn; by &msrtord; run;
		data _null_;
			length fdot $200;
			val="&msrtord";
			fdot=cats("first.",scan(val, 2, " "));
			call symputx("fdot", fdot);
		run;

		data &dataIn;
			set &dataIn;
			format _all_;
			informat _all_;
			by &msrtord;
			if &fdot then &spec_seq=1;
			else &spec_seq+1;
			%if %upcase(&standard)=ADAM and &adamfmt^= %then %do; 
				format &adamfmt; 
			%end;
		run;
	%end;
	/* Else if *SEQ not exist in spec */
	%else %if &spec_seq= %then %do;
		proc sort data=&dataIn; by &msrtord; run;

		data &dataIn;
			set &dataIn;
			format _all_;
			informat _all_;
			%if %upcase(&standard)=ADAM and &adamfmt^= %then %do; 
				format &adamfmt; 
			%end;
		run;
	%end;

	/* Merge variable list in dataIn and spec to get data-label list and flag count/type mismatches */
	data avgml.label_&domain;
		set sashelp.vcolumn;
		where upcase(libname)="WORK" and upcase(memname)=%upcase("&dataIn"); /*EW 20240820 */
		spec_type=strip(upcase(type));
		var1=strip(upcase(name));
		keep var1 spec_type;
	run;

	proc sort data=avgml.spec_&domain; by var1; run;
	proc sort data=avgml.label_&domain; by var1; run;

	data avgml.label_1&domain avgml.qcchk1_&domain avgml.qcchk2_&domain;
		merge avgml.label_&domain(in=a) avgml.spec_&domain(in=b);
		by var1;
		if a and b then do;
			label=strip(var1)||" '"||strip(var2)||"'" ;
			output avgml.label_1&domain;
		end;
		if a=0 and b then output avgml.qcchk1_&domain;
		if a and b then do;
			if var3 ^= spec_type then output avgml.qcchk2_&domain;
		end;
	run;

	proc sort data=avgml.label_1&domain; by odr; run;

	proc sql noprint;
		select label into: mainlabel separated by ", " from avgml.label_1&domain;
		select var1 into: keepvar_main separated by ", " from avgml.label_1&domain;
	quit;

	/*Assigning Length */
	%avTrimCharVarsToMaxLength(dataIn=&dataIn);

	/*Main dataset */
	proc sql;
		create table &maindsn(label="&m_label") as select
		&mainlabel from &dataIn;
	quit;

	/*XPT and CSV Redirect*/

	%if &libdsn ^= WORK  %then %do; /*XPT CSV -Do Start*/
		/* EW 20240820: combined 2 similar data steps */
		%let xpt_file=; 
		%let csv_file=; 
		data _null_;
			length xpt_file csv_path $2000;
			set sashelp.vslib end=last;
			where upcase(libname)=%upcase("&libdsn");
			domain_=scan("&maindsn", 2,".");

			xpt_file=cats(path, "\01_XPT\",lowcase(domain_), ".xpt");
			csv_path=cats(path, "\05_CSV\", lowcase(domain_),".csv");

			if last then do;
				call symputx("xpt_file", xpt_file);
				call symputx("csv_file", csv_path);
			end;
		run;

		%if %sysfunc(exist(&maindsn)) %then %do;

			/* IE 24SEP2024: Updated to include dataset label in XPT, which gets dropped when proc export is used */
			%local 	av_temp_main_library av_temp_main_domain xpt_file_;
			%let 	av_temp_main_library = %sysfunc(scan(&maindsn, 1, '.'));	
			%let 	av_temp_main_domain = %sysfunc(scan(&maindsn, 2, '.'));	
			%let 	xpt_file_ = &xpt_file.;

			libname xptout xport "&xpt_file";	
			filename xptpath "&xpt_file_.";

			%loc2xpt(libref=&av_temp_main_library.
			    ,memlist=&av_temp_main_domain.
				,format=V5
				,filespec=xptpath);

			libname xptout clear;
/*
			libname xptout xport "&xpt_file";

			data xptout.&domain;
				set &maindsn(sortedby=_null_) ;
			run;

			libname xptout clear;
*/		
			proc export data= &maindsn
				outfile="&csv_file"
				dbms=csv
				replace;
			run;

		%end;
	%end; /*XPT CSV-Do End*/


	/**QC_Check **/

	/* 1. Variable check from Spec template */
	data _null_;
		length variable message $200;
		set avgml.qcchk1_&domain;
		variable=strip(upcase(var1));
		message="Variable exist in Spec but not in Final dataset";
		len=10-length(variable);
		final_issue="WARNING:"||cats(_n_)||"/[AVANCE "||put(datetime(), e8601dt. -l)||"] "||strip(variable)||repeat("-", len+2)||"> "||strip(message);
		put final_issue;
	run;

	/* 2. Variable check from Spec template */
	data _null_;
		length variable message $200;
		set avgml.qcchk2_&domain;
		variable=strip(upcase(var1));
		message="Variable(TYPE) mismatch between Spec and Final dataset";
		len=10-length(variable);
		final_issue="WARNING:"||cats(_n_)||"/[AVANCE "||put(datetime(), e8601dt. -l)||"] "||strip(variable)||repeat("-", len+2)||"> "||strip(message);
		put final_issue;
	run;

	proc delete data=avgml.spec_&domain avgml.attrib_&domain avgml.sort_1&domain avgml.sort_2&domain 
		avgml.fmt_&domain avgml.label_&domain avgml.label_1&domain avgml.qcchk1_&domain avgml.qcchk2_&domain /*maxlen maxlen1*/;
	run;

	/**************************************************************************/
	/**************************** SuppQual ************************************/
	/**************************************************************************/
	
	/* No SuppQual for ADaM -> exit */
	%if %upcase(&standard) =ADAM %then %do;
		%goto exit;
	%end;

	/* Check if SUPP--_VLM exists in spec. If not, exit */
	%let get_error= ;

	proc sql noprint;
		select memname into: get_error from sashelp.vtable
			where libname=%upcase("&speclib") and upcase(memname)=%upcase("supp&domain._vlm");
	quit;

	%if &get_error = %then %do;
		%goto exit;
	%end;

	/* Get a list of suppqual variables from spec--_vlm */
	data _null_ ;
		length new newvar $2000;
		set sashelp.vcolumn end=last;
		retain new;
		where upcase(libname)=%upcase("&speclib.") and memname=%upcase("supp&domain._vlm");
		newvar=cats(name,"= svar", varnum);
		new=catx(" ", newvar, new);
		if last then call symputx('rensupp', strip(new));
	run;

	data avgml.supp_vlm;
		set &speclib..supp&domain._vlm(rename=(&rensupp));
		where not missing(svar1);
			format _all_;
			informat _all_;
			qnam=svar1;
			qnam1="'"||strip(upcase(qnam))||"'";
			qlabel= svar2;
			qorig=  svar5;
			qeval=svar10;
		keep qnam qlabel qorig qeval qnam1;
	run;

	/* Check if SUPP--_VLM empty. If yes, exit */
	%let chk_qnam= ; 
	%let get_error=0; 

	proc sql noprint;
		select count(*) into : get_error separated by ' ' from avgml.supp_vlm;
		select qnam1 into : chk_qnam separated by ' ' from avgml.supp_vlm;
	quit;

	%if &get_error = 0 %then %do;
		%goto exit;
	%end;

	/* Retain a list of SUPP-relevant variables from dataIn */
	data avgml.supp&domain._1;
		set sashelp.vcolumn;
		where upcase(libname)="WORK" and upcase(memname)=%upcase("&dataIn");
		qnam=strip(upcase(name));
		if qnam in ("STUDYID" "DOMAIN" "USUBJID" %upcase("&spec_seq") &chk_qnam) then output;
	run;

	/* Combine supp variable list from spec_vlm and dataIn by Intersection */
	proc sort data=avgml.supp&domain._1; by qnam; run;
	proc sort data=avgml.supp_vlm; by qnam; run;

	data avgml.supp&domain._2 avgml.qc_chk1_supp&domain. ;
		merge avgml.supp&domain._1(in=x) avgml.supp_vlm(in=y);
		by qnam;
		if x and y then output avgml.supp&domain._2;
		if x =0 and y then output  avgml.qc_chk1_supp&domain.;
	run;

	/* Check count and store qnam list */
	%let get_error=0 ;

	proc sql noprint;
		select count(*) into : get_error separated by ' ' from avgml.supp&domain._2;
		select qnam into : keep_qnam separated by ' ' from avgml.supp&domain._2;
		select qnam into : keepvar_supp separated by ',' from avgml.supp&domain._2;
	quit;

	/* As VLM will not be empty at this stage due previous check, 0 count implies no supp variable exist in dataIn */
	%if &get_error =0 %then %do; 
		%put WARNING:1/[AVANCE %sysfunc(datetime(), e8601dt.)] QNAMs does not exist in the %upcase(&dataIn) dataset;
		%goto exit;
	%end;

	/* Retain supp-relevant variables from dataIn */
	data avgml.supp&domain._3(rename=(domain=rdomain));
		set &dataIn(keep=studyid domain usubjid &spec_seq &keep_qnam);
	run;

	/* SUPP Qual (Start) */
	proc sort data=avgml.supp&domain._3; by studyid rdomain usubjid &spec_seq; run;

	proc transpose data=avgml.supp&domain._3 out=avgml.supp&domain._4;
		by studyid rdomain usubjid &spec_seq;
		var &keep_qnam;
	run;

	data avgml.supp&domain._5;
		set avgml.supp&domain._4;
		where not missing(col1);
		qnam=strip(upcase(_name_));
		qval=col1;
		%if &spec_seq^= %then %do;
			idvar=%upcase("&spec_seq");
			idvarval=strip(put(&spec_seq, ??best.));
		%end;
		%else %do;
			%put WARNING:1/[AVANCE %sysfunc(datetime(), e8601dt.)] --SEQ is not defined in spec. Very unlikely if SUPP-- is expected.;
			idvar='';
			idvarval='';
		%end;
	run;
	%if ^&sysnobs %then %do;
		%put NOTE:1/[AVANCE %sysfunc(datetime(), e8601dt.)] No data collected for nominated supplemental qualifiers;
		%put NOTE:2/[AVANCE %sysfunc(datetime(), e8601dt.)] Data &suppdsn not created;
		%goto exit;
	%end;

	proc sort data=avgml.supp&domain._5; by qnam;run;
	proc sort data=avgml.supp_vlm; by qnam;run;

	data avgml.supp&domain._6(keep=studyid rdomain usubjid idvar idvarval qnam qlabel qval  qorig qeval);
		length qnam $200;
		merge avgml.supp&domain._5(in=x) avgml.supp_vlm(in=y);
		by qnam;
		if x and y ;
	run;

	/*Assigning Maxlen*/
	%let maxlen=;

	%avTrimCharVarsToMaxLength(dataIn=avgml.supp&domain._6);

	proc sort data=avgml.supp&domain._6; by studyid rdomain usubjid idvar idvarval qnam; run;

	proc sql noprint;
		create table &suppdsn(label="Supplemental Qualifiers for %upcase(&domain)") as
			select STUDYID 'Study Identifier' ,
					RDOMAIN 'Related Domain Abbreviation' ,
					USUBJID 'Unique Subject Identifier' ,
					IDVAR 'Identifying Variable' ,
					IDVARVAL 'Identifying Variable Value' ,
					QNAM 'Qualifier Variable Name' ,
					QLABEL 'Qualifier Variable Label' ,
					QVAL 'Data Value' ,
					QORIG 'Origin' ,
					QEVAL 'Evaluator' 
			from avgml.supp&domain._6;
	quit;

	/*	XPT CSV Redirect*/
	%if &libdsn ^= WORK  %then %do; /*XPT CSV -Do Start*/

		/* Combine 2 similar data steps */
		%let xpt_file=; 
		%let csv_file=; 
		data _null_;
			length xpt_file csv_file $2000;
			set sashelp.vslib end=last;
			where upcase(libname)=%upcase("&libdsn");
			domain_=scan("&suppdsn", 2,".");

			xpt_file=cats(path, "\01_XPT\",lowcase(domain_), ".xpt");
			csv_file=cats(path, "\05_CSV\", lowcase(domain_),".csv");

			if last then do;
				call symputx("xpt_file", xpt_file);
				call symputx("csv_file", csv_file);
			end;
		run;

		%if %sysfunc(exist(&suppdsn)) %then %do;

			/* IE 24SEP2024: Updated to include dataset label in XPT, which gets dropped when proc export is used */
			%local 	av_temp_supp_library av_temp_supp_domain xpt_file_;
			%let 	av_temp_supp_library = %sysfunc(scan(&suppdsn, 1, '.'));	
			%let 	av_temp_supp_domain = %sysfunc(scan(&suppdsn, 2, '.'));	
			%let 	xpt_file_ = &xpt_file.;

			libname xptout xport "&xpt_file";		
			filename xptpath "&xpt_file_.";

			%loc2xpt(libref=&av_temp_supp_library.
			    ,memlist=&av_temp_supp_domain.
				,format=V5
				,filespec=xptpath);

			libname xptout clear;
/*
			libname xptout xport "&xpt_file";

			data xptout.supp&domain;
				set &suppdsn(sortedby=_null_) ;
			run;

			libname xptout clear;
*/
			proc export data= &suppdsn
				outfile="&csv_file"
				dbms=csv
				replace;
			run;

		%end;
	%end; /*XPT CSV-Do End*/

	/*QC CHECK	*/
	/*	 3. Qnam check from Spec template */
	data _null_ ;
		length variable message $200;
		set avgml.qc_chk1_supp&domain.;
		variable=strip(upcase(qnam));
		message="QNAM exist in Spec but not in Final dataset";
		len=10-length(qnam);
		final_issue="WARNING:"||cats(_n_)||"/[AVANCE "||put(datetime(), e8601dt. -l)||"] "||strip(variable)||repeat("-", len+2)||"> "||strip(message);
		put final_issue;
	run;

	proc delete data=avgml.supp_vlm avgml.supp&domain._1 avgml.supp&domain._2 avgml.qc_chk1_supp&domain. avgml.supp&domain._3 avgml.supp&domain._4 
		%if %sysfunc(exist(avgml.supp&domain._5)) %then %do;
			avgml.supp&domain._5 
		%end;
		%if %sysfunc(exist(avgml.supp&domain._6)) %then %do;
			avgml.supp&domain._6
		%end;
			;
	run;

	%exit:;

	/*Compare report*/
	%avCompare(dataOut=&dataOut, domain=&domain, standard=&standard)

	/*04_Excel combined */
	%if &libdsn ^= WORK %then %do;	
		%let comb_file=; 
		data _null_;
			length comb_file $2000;
			set sashelp.vslib end=last;
			where upcase(libname)=%upcase("&libdsn");
			domain_=scan("&maindsn", 2,".");
			comb_file=cats(path, "\04_Excel combined\",lowcase(domain_), ".csv");
			if last then call symputx("comb_file", comb_file);
		run;
	
		/* EW 20240820 */
		%if %sysfunc(exist(&maindsn)) %then %do;
			proc sql;
				create table avgml.Excel_combined as 
				select
					  &keepvar_main

					%if %sysfunc(exist(&suppdsn)) %then %do;
					, &keepvar_supp 
					%end;

				from &dataIn;
			quit;
		%end;

		proc export data= avgml.Excel_combined
			outfile="&comb_file"
			dbms=csv
			replace;
		run;
	%end;	 
%mend avInterimDataToFinalStandard;

